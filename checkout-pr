#!/usr/bin/env python
import json
import subprocess
import sys
import urllib2

"""Checks out a pull-request branch

This script is intended for project maintainers to use for checking out PR
branches from external contributor's forks, so maintainers can push changes
to the branches in contributors' forks and thus back to the PRs.

It takes as its sole argument either a PR number or PR URL, then into the
clone in which it's run does a `git checkout` of the corresponding branch
from the PR contributor's fork. It uses the SSH URL for the fork, which
assumes the user running it has write access to the contributor's branch.

Fed just a PR number, it assumes the user has a remote named `origin`, and
uses the URL for that remote to infer which repo the PR was submitted to.
"""

def main():
    if len(sys.argv) == 1:
        usage()
    prNumber = sys.argv[1]
    if sys.argv[1].startswith("http"):
        prUrlParts = sys.argv[1].split('/')
        prNumber = prUrlParts[-1]
        ghOrgSlashRepo = "%s/%s" % (prUrlParts[-4], prUrlParts[-3])
    else:
        originUrl = git("config", "remote.origin.url").strip()
        if not originUrl:
            print "fatal: no 'origin' remote found"
        ghOrgSlashRepo = ""
        if originUrl.startswith("git@github.com:"):
            ghOrgSlashRepo = originUrl[15:][:-4]
        elif originUrl.startswith("https://github.com/"):
            ghOrgSlashRepo = originUrl[19:][:-4]
        if not ghOrgSlashRepo:
            print "fatal: no 'origin' url found"
    if not prNumber.isdigit():
        print "fatal: no usable PR number or PR URL given"
        usage()


    print "Getting data for %s PR #%s..." % (ghOrgSlashRepo, prNumber)
    ghApiBaseUrl = "https://api.github.com/repos/%s" % (ghOrgSlashRepo)
    prApiUrl = "%s/pulls/%s" % (ghApiBaseUrl, prNumber)
    response = None
    pr = None
    try:
        response = urllib2.urlopen(urllib2.Request(prApiUrl))
    except urllib2.HTTPError as e:
        if e.code == 404:
            print "fatal: no data found at %s" % prApiUrl
            sys.exit(1)
    pr = json.load(response)

    prAuthor = pr['head']['repo']['owner']['login']
    prBranch = pr['head']['ref']
    prRefSpec = "+refs/heads/%s:refs/remotes/%s/%s" % (prBranch, prAuthor, prBranch)

    author = json.load(urllib2.urlopen("https://api.github.com/users/%s" % prAuthor))

    print
    print "Author: %s (%s)" % (prAuthor, author['name'])
    print "Title:  %s" % pr['title']
    print

    localBranch = "%s-%s" % (prAuthor, prBranch)

    print "Preparing for checkout into '%s' local branch." % localBranch
    if git("config", "branch.%s.remote" % localBranch):
        print "fatal: there's already a '%s' branch here" % localBranch
        sys.exit(1)

    if not git("config", "remote.%s.url" % prAuthor):
        print "Adding new remote '%s'." % prAuthor
        prRepoUrl = pr['head']['repo']['ssh_url']
        git("remote", "add", "--no-tags", "-t", prBranch, prAuthor, prRepoUrl)

    refSpecs = git("config", "--get-all", "remote.%s.fetch" % prAuthor)
    if not prRefSpec in refSpecs:
        print "Adding '%s' branch info to remote '%s'." % (prBranch, prAuthor)
        git("remote", "set-branches", "--add", prAuthor, prBranch)

    print "Fetching '%s' branch from remote '%s'." % (prBranch, prAuthor)
    git("fetch", prAuthor, prRefSpec)
    print "Checking out into '%s' local branch." % localBranch
    print git("checkout", "-b", localBranch, "--track", "%s/%s" % (prAuthor, prBranch)).strip()

def git(cmd, *args):
    full_cmd = ["git", cmd] + list(args)
    try:
        return subprocess.check_output(full_cmd, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as e:
        if e.output.strip():
            print e.output
            sys.exit(1)

def usage():
    print "Usage:"
    print "  %s PR_NUMBER | PR_URL" % sys.argv[0]
    sys.exit(1)

if __name__ == "__main__":
    try:
        retcode = main()
    except:
        raise
    else:
        sys.exit(retcode)
